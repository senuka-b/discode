{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"getting-started/create-bot/","title":"Creating your first bot","text":"<p>Now that you have installed Discode, let's create your first discode bot.</p>"},{"location":"getting-started/create-bot/#discord-side-setup","title":"Discord-side Setup","text":""},{"location":"getting-started/create-bot/#creating-an-application","title":"Creating an application","text":"<p>If you're new to creating bots, you should be aware that you have to create an actual Discord bot user through Discord. This page would guide you step-by-step. Simply, click the button below to head over to the <code>Discord Developer Portal</code></p> <p>Developer Portal </p> <p>Now you are in this page:</p> <p></p> <p>Next, click on \"New Application\" on the top right</p> <p>You will be asked a name, you can name it whatever you like.  the Terms of Services and you will be presented with this page:</p> <p></p> <p>Note</p> <p>The description of the application is the \"About Me\" section of your bot. You can leave it blank or write something fun.</p> <p>Click on \"Bot\"</p> <p>Now, you are here:</p> <p></p> <p>Give your bot a nice name, change it's profile picture and maybe give it your own banner too.</p> <p>Scroll down and toggle the settings shown below:</p> <p></p> <p>Finally, scroll up again and  copy the token of your new bot by clicking Reset Token &gt; Copy. You're gonna need it later.</p> <p></p> <p>Warning</p> <p>Please note that you can only copy your token once without resetting it. This means that if you lost it, you are gonna have to reset the token and obtain a new token instead.</p> <p>Danger</p> <p>It is extremely important that you keep the token of this bot safe. If it is leaked, attackers can use this token to maliciously use your bot. Think of this token as the bot's password. With the password, the bot is accessible anywhere.</p> <p>Also, that token in the screenshot is useless!</p>"},{"location":"getting-started/create-bot/#inviting-your-bot","title":"Inviting your bot","text":"<ol> <li>Click on OAuth2 on the left pane</li> <li>Scroll down to \"OAuth2 URL Generator\" then click on \"bot\"</li> <li>Select the permissions you want for your bot</li> <li>Click copy and paste the url in a new tab!</li> </ol> <p>Here's a demonstration:</p>"},{"location":"getting-started/create-command/","title":"Creating your first command","text":"<p>Since you created a new project, let's create your very own command!</p>"},{"location":"getting-started/create-command/#say-command","title":"Say command","text":""},{"location":"getting-started/create-command/#what-well-be-creating","title":"What we'll be creating:","text":"<p>We will create a simple command named 'say' that has a parameter named <code>text</code>.</p> <p>Then, the bot would simply send back whatever text was passed to it. </p>"},{"location":"getting-started/create-command/#example","title":"Example","text":"<p><code>User</code>: !say Hello World! <code>Bot</code>: Hello World!</p>"},{"location":"getting-started/create-command/#procedure","title":"Procedure","text":"<p>Okay let's start. Firstly, when you create the project you will be presented with a sample hello command. It simply just says Hello, World. Let's delete this and start from scratch.</p> <p>Click on the two nodes and delete it.</p> <p>Tip</p> <p>Deleting a node is as simple as clicking it then hitting the <code>backspace</code> key.</p> How to select multiple nodes at once? <p>You can press and hold the shift key then drag your mouse by clicking it over the nodes you want to delete. This makes a group selection. Now press the <code>backspace</code> key and watch them dissapear</p> <p></p> <p>Now let's do these steps.</p> <ol> <li>Drag and drop a \"Command\" from Special Components</li> <li>Change the name to <code>say</code></li> <li>Add a description (optional)</li> <li>Add a parameter with the +</li> <li>Name the parameter to <code>text</code> (this can be whatever you want)</li> <li>Change the parameter type to Text</li> </ol> <p>You created the command!</p> <ol> <li>Now drag and drop a \"Say\" node from Action Components</li> <li>Connect the command to the say action</li> <li>Write <code>{text}</code> in the say action</li> </ol> <p>You have now created the say action.</p> <p>The command we want is now ready, therefore hit reload bot and execute the command.</p> <p>Here's a video demonstration of what we just did:</p>"},{"location":"getting-started/create-command/#demonstration","title":"Demonstration","text":""},{"location":"getting-started/create-project/","title":"Creating your first project","text":"<p>Now that you created your discord bot through discord, let's bring it to life through Discode </p>"},{"location":"getting-started/create-project/#creating-a-project","title":"Creating a project","text":"<p>When you open Discode you have two big buttons in the center of the screen.</p> <ol> <li> <p>Create project</p> </li> <li> <p>Open existing project</p> </li> </ol> <p>Pretty self explanatory, right?</p> <p>Let's create a new one.</p> <p>After clicking on  <code>Create Project</code> you will be prompted with a dialog that has some data to be filled.</p> <p></p>"},{"location":"getting-started/create-project/#command-prefix","title":"Command prefix","text":"<p>Almost all of these values are self explanatory by it's name. However, if you are confused about what \"default command prefix\" means, it is basically the character users require to type before invoking a command. i.e ([prefix]command)</p> <ul> <li>!hello</li> <li>?help</li> </ul>"},{"location":"getting-started/installation/","title":"Getting Started","text":"<p>Warning</p> <p>Discode is still in beta-development, meaning that the releases are still BETA releases so it may contain bugs or may not work as expected. You can wait till a stable release rolls out or if you wanna try it out, you can install the latest beta release.</p> <p>First things first, let's install Discode!</p>"},{"location":"getting-started/installation/#installation","title":"Installation","text":""},{"location":"getting-started/installation/#windows","title":"Windows","text":"<p>Download the <code>discode-setup.exe</code> file from the latest release.</p> <p>Download </p> <p>Now, run the setup file and follow the instructions.</p>"},{"location":"getting-started/installation/#linux-mac","title":"Linux &amp; Mac","text":"<p>Not supported yet, but I will try my best to create installers when a  stable version comes out.</p>"},{"location":"getting-started/whats-next/","title":"Now what?","text":"<p>Congratulations! You made it.</p> <p>You created your first working bot with Discode.</p> <p>Now, you can learn more about Discode by reading through the Guides. Learn about objects and their properties in the Reference page. You can see a list of examples and links to their project files in the Examples page. Thank you for using Discode &amp; leave a  if you liked the project so far!</p> <p>Download Discode  Checkout the Guides Reference page Examples Project repository</p>"},{"location":"guides/parameters/","title":"An Introduction to Parameters","text":""},{"location":"guides/parameters/#what-are-parameters","title":"What are parameters?","text":"<p>Command parameters are a way of passing data to your commands. This means that whatever you say after invoking the command can be accessed in your discode project as a \"parameters\".</p> <p>Let's learn the difference between parameters and arguments:</p>"},{"location":"guides/parameters/#arguments","title":"Arguments","text":"<p>Arguments are whatever you pass next to the command name when you are invoking the command.</p> <p>Let's say for instance, we have a command called 'say'</p> <p><code>User</code>: !say @John hello!</p> <p>In the above command invocation, we have passed 2 arguments. The first argument is <code>@John</code> and the second is <code>hello!</code>.</p> <p>Similarly, we can pass an unlimited amount of arguments to the command.</p>"},{"location":"guides/parameters/#parameters","title":"Parameters","text":"<p>Now, we need a way to access these arguments in our Discode project right? That's when parameters come in.</p> <p>When you create a command, you can define parameters by hitting the  next to parameters. This will create a new parameter. You'll notice that a parameter name field with a parameter type appears.</p> <p></p> <p>The parameter name is a required field. You can name this parameter whatever you want but it is convenient for you if you name it to something that makes sense. </p> <p>Info</p> <p>Eventhough you can name a parameter whatever you want, you can't have spaces in your parameter name. For instance <code>cool user</code> is not allowed  and <code>cool_user</code> is correct </p> How do I delete a parameter? <p>Right click on any parameter and it would remove the last parameter from the list of parameters in your command</p> <p>Let's take an example to demonstrate how command parameters work.  Let's say the user is invoking the command like so:</p> <p><code>User</code>: !say @John #my-text-channel Discode is awesome don't you think??</p> <p>In this case, 3 command arguments have been passed:</p> <ul> <li><code>@John</code></li> <li><code>#my-text-channel</code></li> <li><code>Discode is awesome don't you think??</code></li> </ul> <p>Now, let's access these arguments in a command.</p> <ol> <li>We'll create 3 parameters in our command</li> <li>Name one <code>member</code> and give it a type of <code>Member</code></li> <li>Name one <code>channel</code> and give it a type of <code>TextChannel</code></li> <li>Name the last one <code>message</code> and give it a type of <code>Text</code></li> </ol> <p>Now our command should look like this:</p> <p></p> <p>You can now access the values of these parameters by using curly braces eg: <code>{parametername}</code> within your actions. Here's an example that would send the <code>message</code> in the <code>channel</code>.</p> <p></p> <p>Tip</p> <p>If you ever want to make a parameter required as in, an argument must be entered in the command: you can check the checkbox on the right. Now users are gonna have to enter an argument for the required ones or the command is gonna error out(which you can handle in an error handler)</p>"},{"location":"guides/parameters/#parameter-types","title":"Parameter types","text":"<p>As of now, the parameter types that are available as follows.</p>   | Type      | Description                          | | :--------- | :---------------------------------- | | `Member`       | Accepts a member mention, ID or name | | `TextChannel` | Accepts a channel mention, channel ID or channel name | | `Text`    | Accepts anything and converts into a text | | `Number` | Accepts number  | | `Role` | Accepts a role mention, role ID or role name | | `Server` | Accepts a server ID or server name | | `User` | Accepts a user mention, ID or name |"},{"location":"guides/parameters/#how-do-parameters-work","title":"How do parameters work?","text":"<p>The way these parameters work is simple. Basically, when you provide an argument for a parameter, Discode is gonna try to convert that argument to whatever type the parameter is. For instance if you have a <code>Member</code> type parameter then Discode is gonna take that argument, check if it's a mention, ID or name and attempt to convert that to a Member object for you. If Discode cannot find that specific member, then the command is gonna throw an error.</p> <p>Each parameter returns an object of that type. Meaning, you will have access to all it's attributes.</p> <p></p> <p>In the above example <code>Member</code> object has an attribute called 'mention' that mentions the member. You can learn about all these attributes in the reference section.</p>"},{"location":"guides/parameters/#consume-all","title":"Consume All","text":""},{"location":"guides/parameters/#last-parameter","title":"Last parameter","text":"<p>You may have noticed that in the example we used here, the last argument had multiple words and characters but all the previous arguments had only one word/no spaces. Why doesn't Discode consider the different words in the last argument as separate parameters?</p> <p>To answer this question, Discode automatically consumes all remaining arguments if it's the last parameter. </p> <p>Meaning, if a command has 3 parameters: </p> <ul> <li> <p>Discode is gonna: </p> <ul> <li>take the first argument and use it as the first parameter,</li> <li> <p>take the second argument and use it as the second parameter,</p> </li> <li> <p>take the rest of the remaining arguments and use it as the third parameter</p> </li> </ul> </li> </ul>"},{"location":"guides/parameters/#why","title":"Why?","text":"<p>This was done for convenience, so that users don't have to worry about having an argument that requires more than one word.</p>"},{"location":"guides/parameters/#what-if-i-want-it-to-not-consume-the-rest","title":"What if I want it to not consume the rest?","text":"<p>That's simple, just create an extra parameter that you're not gonna use. That last parameter is gonna consume whatever else is passed after your actual parameters are used by the user.</p>"},{"location":"guides/parameters/#does-this-work-for-all-types","title":"Does this work for all types?","text":"<p>Currently this only works for <code>Text</code> but other types are gonna have this feature too. </p>"},{"location":"guides/parameters/#consuming-multiple-arguments-in-multiple-parameters","title":"Consuming multiple arguments in multiple parameters","text":"<p>Now, let's say you want multiple arguments in each of your parameters. To do this, you can use single quotes when you are invoking the command.</p> <p><code>User</code>: ?say 'Hello This is a title' 'This is the body of my message' 'This is the end of the message'</p> <p>Now Discode would  interpret your command like so:</p> <ul> <li><code>Hello This is a title</code> - first parameter</li> <li><code>This is the body of my message</code> - second parameter</li> <li><code>This is the end of the message</code> - third parameter</li> </ul>"}]}